import { ReadableStream } from "node:stream/web";
import { describe, expect, it } from "vitest";
import { getFileVersion } from "../../src";
import { getFileVersionStream } from "../../src/lib/get-file-version";

const validFile = new Uint8Array([
  0x70, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x79, 0x00, 0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x45, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x77, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x01, 0x00, 0x01, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x44, 0x00, 0x65, 0x00,
  0x73, 0x00, 0x63, 0x00, 0x72, 0x00, 0x69, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x0b, 0x00, 0x01, 0x00, 0x46, 0x00, 0x69, 0x00,
  0x6c, 0x00, 0x65, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x39, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x2e, 0x00, 0x33, 0x00,
  0x31, 0x00, 0x39, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x01, 0x00, 0x01, 0x00, 0x49, 0x00,
  0x6e, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x4e, 0x00, 0x61, 0x00,
  0x6d, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4c, 0x00,
  0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x70, 0x00, 0x79, 0x00, 0x72, 0x00,
  0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x01, 0x00,
  0x01, 0x00, 0x4c, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00,
  0x64, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6b, 0x00, 0x73, 0x00,
]);

const invalidFile = new Uint8Array([
  0x00, 0x67, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6d,
  0x00, 0x61, 0x00, 0x72, 0x00, 0x6b, 0x00, 0x73, 0x00,
]);

const createStream = (buf: Uint8Array, chunkSize = 50) =>
  new ReadableStream({
    start(controller) {
      for (let index = 0; index < buf.length; index += chunkSize) {
        controller.enqueue(buf.subarray(index, index + chunkSize));
      }

      controller.close();
    },
  });

describe("getFileVersion()", () => {
  it("should handle valid PE files", () => {
    expect(getFileVersion(validFile)).toEqual("0.9.3.3191");
  });

  it("should handle invalid PE files", () => {
    expect(getFileVersion(invalidFile)).toBeUndefined();
  });
});

describe("getFileVersionStream()", () => {
  it("should handle valid PE files", async () => {
    const stream = createStream(validFile);

    await expect(getFileVersionStream(stream)).resolves.toEqual("0.9.3.3191");
  });

  it("should handle invalid PE files", async () => {
    const stream = createStream(invalidFile);

    await expect(getFileVersionStream(stream)).resolves.toBeUndefined();
  });
});
